*******
Notice:
    This file is a backup I made when I was learning how to use git, when I forget some commands I will use it as a reference, most of the information here is from :
    https://www.liaoxuefeng.com/wiki/896043488029600
    I was also benifited a lot from many other blogs and thank those authors.
注：
        这是我在学习使用git时记录的一份备忘录文件，方便自己在忘记某些命令时查阅，其中主要内容来自：廖雪峰的官方网站-Git教程，链接如上。
        学习过程中我也参考了许多其他博客，十分感谢这些作者。
*******

1.安装git：sudo apt-get install git

2.创建版本库：mkdir 文件夹名  （mkdir = make directory）
    cd 该文件夹  （到该文件夹目录下）
    pwd （显示当前目录，确认到该文件夹了，多余操作）
    git init （把该文件夹，或者说，该目录变成Git可以管理的仓库，此时会有一个隐藏的.git文件夹，这个就是管理版本库的目录，不能乱动，隐藏文件可用 ls -ah命令显示）
    
3.在某个目录下创建文件：> filename.txt （这样就利用重定向符创建了一个txt文件）

4.将文件修改提交到暂存区：git add filename.xxx （没有反馈说明是正常的）

5.将暂存区修改提交到git仓库 ：git commit
    git commit -m "本次提交的说明内容" （一般而言是要这样的，不然会打开nano或im叫你去写说明内容，应该有别的指令去不写说明内容）
    
6.查看目前工作区和暂存区状态：git status
    一共有几种情况：modified，表明文件有修改（工作区），但未提交到暂存区，显示“尚未暂存以备提交的更改”；added，提交到暂存区了，显示“修改尚未加入提交”；修改全部commit到分支（branch）里了，显示“无文件要提交，干净的工作区”。
    
7.查看新修改与暂存区的不同：git diff filename.xxx
    git diff HEAD -- filename.xxx （不太清楚这俩有什么区别）
    
8.查看版本记录：git log
    git log --pretty=oneline （简化输出信息）
    
9.版本回退：git reset --hard HEAD^ （回退一个版本，则一个^）
    git reset --hard HEAD^^ （回退两个版本）
    git reset --hard HEAD~100 （回退100个版本）
    git reset --hard xxxxxx （回退到特定版本，这个xxxxx是版本的id）
    notice:版本回退后，在这个版本之后修改的东西就没了，除非，再“搭时光机到未来”。例如，我在版本2创建提交了一个文件A，在版本三我把它删了，还commit了，同时这一版本我还建立了文件B，此时，如果回到版本2,文件B就没了，因为这个版本2时还是没有文件B的。一个办法是回退前偷偷复制一份B出仓库，再回退，或者，回退后copy存一份A，然后到版本3。
    
10.查看历史修改记录：git reflog （回顾以前修改了什么，这样子，可以看到回退前的版本commit id，于是可以搭时光机到“未来”的版本）

11.丢弃文件在工作区的修改：git checkout -- filename.xxx
    git restore filename （这个命令也可以丢弃在工作区的修改）
    
12.工作区-->暂存区-->分支
    working directroy-->stage(or index)-->branch(with name like "master" or "main" or others)
    stage and branches together consists of repository(版本库)
    
13.丢弃文件在暂存区的修改：git restore --staged filename.xxx 
    git reset HEAD filename.xxx （这个指令也行，直接退回到这个名字的文件的branch版本）
    注意，取消在暂存区（stage）里的修改后，工作区里还有修改，因此还要再丢弃文件在工作的修改
    
14.删除文件：rm filename.xxx （删除本地文件）
    git rm filename.xxx  （删除git仓库里的文件）
    git commit -m "xxx"  （删除后还要提交commit）
    git checkout -- filename.xxx （在还未提交修改前，可以用该命令后悔，用版本库里的版本替换工作区的版本，本质上，无论工作区是修改还是删除，都可以用此一键还原）
    如果已经commit了，就只能用版本回退了。回退前记得把工作区其他修改提交。

15.github远程仓库建立与初始化（先有本地库，后有远程库，如何关联远程库）：
    step1:创建SSH Key。在用户主目录下看有无.ssh文件夹（记得勾选显示隐藏文件夹，或者bash中使用ls -ah命令列出当前目录下含隐藏文件在内的所有文件），里面的id_rsa为私钥，id_rsa.pub为公钥。若无.ssh,bash中输入命令:ssh-keygen -t rsa -C "你的邮箱地址",然后一路回车即可.
    step2:把你的公钥,添加到你的github账号里去:登陆github,没账号先创一个,连不上就想办法翻个墙.打开setting,再打开ssh and gpg keys这个设置,点new ssh key,把id_rsa.pub里面的内容全部复制到里面,添加即可.
    step3:创建git仓库:先点create a new repository,写个repository name(仓库名),创建.
    step4:和电脑上的仓库关联:打开bash,cd到本地仓库的目录,然后输入 git remote add origin git@github.com:xxxxxxx(你的github用户名)/xxxx.git(你的仓库名)即可,此处有一点要注意,千万别按github上提示的那个来,那个提示的是填http地址,但是貌似github从21年8月13日开始就不能用http登录了还是咋地,我们用的是ssh命令,因此要用形如 git@github.com/xxxxx/xxx.git的地址而不是https://github.com/xxxx/xxxx.git的地址;输入完后,敲回车,等一会,因为连接github可能要时间,总之会有反馈,然后如果是第一次用这个ssh连接,还会出现一个warning,要你确认这个Github服务器的key是不是真的来自Github,输入yes,回车,就ok了;这之后github的key就被添加到本机信任列表里.
    remark：gir remote add origin xxxxx,此处的origin就是给远程库起的名字
    
16.查看远程库信息：git remote -v

17.删除远程库：git remote rm <name> (<>不用打，里面填远程库名字，远程库名字可以用git remote -v查看版本时获得，开头那个单词就是)
   remark:删除远程库本质上是“解绑”，取消本地和远程的关联，真删远程库还得上github去删。   
   
18.把本地branch的最新修改推送到github：git push origin main
    remark:此处的origin是远程库的名字，如果当时创建时起的是别的名字，就改成别的；此处的main是本地你要提交的branch的名字
    
19.克隆远程库（先创建远程库，再从远程库克隆）：
    step1:现在github上创建一个新的repository，创建时可以勾选上Initialize this repository with:Add a README file，这样创建后就会有个README.txt
    step2：克隆到本地，先cd到你想clone这个仓库的位置，这个位置不必是已经git init了的文件夹，因为clone下来的文件夹是一个已经初始化为仓库的文件夹，而且感觉最好也不要放在已有仓库的目录下，这样子会变成仓库里还有个仓库，感觉很不对劲。言归正传，之后输入git clone git@github.com:xxxxxx(github id)/xxxx.git(name of repository)即可。
    remark：此处，git@github.com/.....的地址对应的是ssh协议，http开头的地址是http协议，不过目前好像不能用http协议了，如果能用好像还得要求每次都输入口令。
    
20.分支系列初步：
    --1.查看分支：git branch   会显示所有branch，当前branch前会有个*号；
    --2.创建分支：git branch <name>
    --3.切换分支：git checkout <name> 或者  git switch <name>
    --4.创建+切换分支：git checkout -b <name> 或者  git switch -c <name>
    --5.合并某分支到当前分支：git merge <name>
    --6.删除分支：git branch -d <name>
    --7.git鼓励大量使用分支！
    
21.分支冲突：当两个分支各自有了新的commit，（且存在相同文件修改不同情形？）此时，无法执行“快速合并”，即，输入git merge指令时，会显示存在冲突，git status会说明存在冲突的文件，而我们此时可以直接打开这个文件，git会用<<<<<<<,=======,>>>>>>>这三种符号标记出不同分支的内容，其中<<<<<<<表示冲突的开始，========为区别两个分支的分割线，>>>>>>>表示冲突的结尾，我们在这个文件中进行修改，删去三种分隔符并选择我们要保留的内容（甚至可以，删去statement1,statement2,而另写一个statement3）。
        之后，再git add + git commit后就合并完成。
        此时可以删去多余的分支。

22.git log的几个参数：
    git log --graph --pretty=oneline --abbrev-commit
    remark1:--graph显示分支的合并情况；
    remark2:--pretty=oneline简化说明内容到一行，不显示用户名和油箱
    remark3:--abbrev-commit是将commit id简写，只保留足够区分不同commit版本的id位数。
    
23.用ssh端口而非port端口去git push/clone:
    (参见：https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port）
    step1:终端中输入vim ~/.ssh/config (我的.ssh目录在用户主目录下，故用~/,视具体位置写)，如果目录下没有config文件那么vim会创建一个新的config文件。
    step2:在config文件中输入以下内容
        Host github.com
            Hostname ssh.github.com
            Port 443
            User git
    step3:输入ssh -T -p 443 git@ssh.github.com以测试，如果是第一次干这事，会弹出一堆东西，然后输入yes回车就可以。之后会反馈，“Hi XXX! You've successfully authenticated, but GitHub does not provide shell access.”这么一段话。就代表这事成了。
    step4: 这之后再git push就是走的ssh，应该会快一些。
    remark：似乎可以在这句话下面多加一些什么，然后就可以设置用网络代理去弄这个ssh端口了。
    
24.git merge分支合并进阶：
    -通常，如果在无冲突情况下使用git merge <branch>，那么git会自动使用Fast forward模式，但这种模式下，如果删除分支后，会丢失掉分支信息.
    -如果我们想要在merge后删掉多余branch，而还能在历史记录里看到分支信息，就需要禁用Fast forward模式，此时Git在merge时就会生成一个新的commit（因而也需要用-m "commit message"命令去提交说明），具体如下：
    git merge --no-ff -m "commit message" <branch>
    -之后再git branch -d <branch>删去多余分支后，使用git log命令仍能看到历史分支记录。
    remark:在合并的两个分支有冲突的情况下，之前说过需要手动调整，此时也会默认禁用Fast forward模式，因而也会保留branch记录。
    
25.bug分支：
    -这个问题适用于这样一个场景：main分支是你的主分支，你在完成某一代码任务（例如，工期一周），你在dev分支上进行工作，修改了若干文件（记为a，b，c，d），这些修改有些还在工作区，有些提交到暂存区，总而言之这几个文件下有很多你还没commit的修改，此时，突然，有个文件e中间有bug（编号为101），需要你尽快修改好（例如，两小时），此时的你自然希望新建一个分支issue-101,希望在这上面把bug修了，然后commit，再merge到main分支去，这样子就不影响到需要用该文件的其他人。
    -然而，问题在于，由于你的HEAD目前指向的分区dev有未提交的修改，当你使用git switch去切换到其他分支时，这些暂存区和工作区的改动依旧存在，换言之，到了其他分支，用git status查看，发现别的分区也会显示有未提交的修改（这是很合理的，因为修改分支本质上是HEAD指针切换了地址，而与工作区和暂存区里的改动无关），而这是不符合你的心意的，更不符合分支的使用原则（创建分支本就是为了先在其他分支进行修改，确保无误后再merge到主分支）。
    -于是，在创建切换新bug分支前，需要用git提供的stash功能，将当前dev分区的“工作现场”储存起来：
    git stash
    -这之后，再用git status查看，会发现dev分支下工作区和暂存区都是干净的（准确地说，是工作区与暂存区都是干净的，无论哪个分支）。
    -此时就可以安心创建git switch -c issue-101，然后修改bug，git add, git commit, switch到main分支，git merge --no-ff -m "message" issue-101,然后删除issue-101，一气呵成。
    -修完bug，此时我们回到dev分区，依旧是干干净净，这时候要如何找回之前存起来的“工作现场”？，如下：
    git stash list， 这一命令会把我们stash的所有现场都还原，形如：stash@{num}:WIP on <branch>: xxxxx(commit id) "message(当时那个工作现场下，HEAD指向的commit的说明)"，（num是不同stash标号，从0开始计数，比如此时是0）
    -然后有两种恢复方法：
    -1.git stash apply stash@{num}：这一方法的特点是，不会删除stash区中的工作现场，如果要删除，还得用git stash drop stash@{num}命令去删掉stash区的现场。
    -2.git stash pop:正如pop这个词的含义一样，它在弹出工作现场后，stash中的工作现场就没了。（问题是，如果有多个stash，会先弹出哪一个？）
    -于是我们恢复了先前的工作区和暂存区，就可以继续之前的代码任务了。
    -wait a minute!此时的你想到一个事，既然dev是从之前的main上创建的分支，main上的e文件有bug，那么dev上的e文件也有bug咯？你想到这，意识到，之后将dev分支merge到主分支时，或许不可避免的要有冲突了。但其实还有解决办法，就是此时在dev上也把bug修了。
    -怎么修？当然可以把先前的修bug操作再弄一遍，然后add，然后等待commit。但是还有一个办法：使用git cherry-pick命令！
    git cherry-pick <commit-id>
    -此处，commit id为之前，在issue-101分支中修改好bug后add再commit时HEAD指向的id，只需要用git log命令就可以往前找到。
    -毕竟，修bug本质上是改代码，本质上就是修改了文件，然后提交，那么之前有提交过的记录，再加上，git本身追踪的正是“修改”而非“文件本身”，这使得修bug某种意义上就对应于最终的commit操作，既然如此，那么把先前的commit再复制一遍就行了。当然，由于现在暂存区也有内容，而我们只想把当时那个暂存区里的内容先commit了，因此要用专门的pick-cherry命令去操作，相当于，有了第二个暂存区！
    
26.feature分支：
    -开发新的feature，最好新建一个分支；
    -如果要丢弃一个没有被合并过的分支（这个分支有与主分支不同的修改），此时需要用git branch -D <name>强行删除。（小-d命令只会提示警告）。

27.多人协作的工作模式：
    -1.用git push origin <branch-name>提交自己的修改；
    -2.如果推送失败，应该是远程分支比本地分支更新，需要先用git pull试图合并；
    -3.如果合并有冲突，则在本地解决冲突，并本地commit提交；（git会先尝试自动合并，失败的话，手动按照前面解决冲突的部分去解决）；
    -4.没有冲突或解决掉冲突后，再用git push origin <branch-name>推送即可；
    -remark：如果git pull提示“no tracking information”，说明本地分支与远程分支的链接关系没有创建，用如下命令即可创建链接：
    git branch --set-upstream-to <branch-name> origin/<branch-name>  （其中，第一个<branch-name>是本地分支名，第二个origin/<branch-name>是远程分支名）；
    -5.如果别人在远程创建了一个branch，自己本地没有，那么就可以用如下命令在本地创建和远程分支对应的分支（名字最好是一样的）：
    git checkout -b branch-name origin/branch-name 或 git switch -c branch-name origin/branch-name
    
28.git rebase操作：把未push的分叉的提交历史整理成一条直线，提交的内容是一样的，但是修改了提交的顺序。每次操作完后，再用push将本地分支推送到远程，则远程分支也是整理过的。

29.打tag标签（e.g.版本信息）：
    git tag <tagname>:新建一个标签，默认打在HEAD指向的commit上；
    git tag <tagname> <commit id>:给指定commit打tag；
    git tag:查看所有标签，按字母顺序排序；  
    git show <tagname>:查看标签信息
    - remark:tag是一个指向commit的死指针，不管在哪个branch上，只要该branch含有这个tag对应的commit，那么git tag命令就会显示有这个tag；而branch是指向commit的活指针，当有了新的commit时该branch的HEAD就会指向新的commit。
    
30. 操作标签：
    git tag -d <tagname>:删除标签
    git push origin <tagname>:将某个tag推送到远程，origin是远程库的名字，可以用git remote -v查到。一般而言，tag只会储存在本地，不会自动推送到远程。
    git push origin --tags:一次性推送全部尚未推送到远程的本地标签。
    git tag -d <tagname>:也只能删除本地标签，为了继续删除远程的标签，用push命令。如下：
    git push origin :refs/tags/<tagname>:删除远程标签。
    
31.Github上Fork与pull request操作：
    -我们可以在git上clone任何开源项目到本地，但是我们没有权限去push到别人的仓库。
    -正确做法是，Fork你想要的开源仓库到自己的Github仓库上，然后拥有自己Fork后的仓库的读写权限，这之后可以建立本地仓库与自己Github上Fork仓库的链接。
    -即：某开源项目官方仓库  ----  Fork的Git个人仓库 ----  本地仓库
    -如果你想要这个开源项目的官方仓库接受你的修改，就可以在Github上发起一个pull request。这时候就由官方仓库的人员决定是否接受你的修改了。
    
32.同时使用多个远程库（例如，同时使用git和gitee）：
   -一般来说，正常用即可，但是，添加新的远程库时要起不同的名字，操作如下：
   -git remote rm origin: 把现有的git的远程库关联删了（只是删个关联和名字，不影响两边文件）；
   -git remote add <linkname1> git@github.com:xxxx/xxx.git
   -git remote add <linkname2> git@gitee.com:xxxx/xxx.git
   -如上操作即可，linkname就是要起的名字，比如就用github和gitee这俩名字。那么之后git push时就写作git push github <branchname>与git push gitee <branchname>即可。
   
